- name: Updater
  hosts: all
  gather_facts: false
  become: true
  tasks: 
    - name: Update package list
      apt:
        update_cache: yes

- name: Install postgresql for DB hosts
  hosts: host01,host02
  gather_facts: false
  become: true
  tasks: 
    - name: Install postgresql
      package:
        name: "postgresql-{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"
        state: present
    - name: Install postgresql contrib
      package:
        name: "postgresql-contrib-{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"
        state: present
    - name: Install libpq-dev
      package:
        name: libpq-dev
        state: present        

- name: db creation and init 
  hosts: host01
  gather_facts: false
  become: true
  tasks:
    - name: INstall psycopg2
      apt:
        name: python3-psycopg2
        state: present
    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started
        enabled: true

    - name: Create database
      command: psql -c "CREATE DATABASE {{ hostvars[inventory_hostname]['DB_DATABASE'] }};" -U postgres 
      become: true
      become_user: postgres

    - name: Create replication user
      command: psql -c "CREATE USER {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} WITH REPLICATION ENCRYPTED PASSWORD '{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}';" -U postgres
      become: true
      become_user: postgres

    - name: Create tables and insert test data
      command: psql -d {{ hostvars[inventory_hostname]['DB_DATABASE'] }} -c "CREATE TABLE IF NOT EXISTS emails (id SERIAL PRIMARY KEY, email VARCHAR(255) NOT NULL); CREATE TABLE IF NOT EXISTS phone_numbers (id SERIAL PRIMARY KEY, phone_number VARCHAR(30) NOT NULL); INSERT INTO phone_numbers (phone_number) VALUES ('88005553535') ON CONFLICT DO NOTHING; INSERT INTO emails (email) VALUES ('example@test.try') ON CONFLICT DO NOTHING;" -U postgres
      become: true
      become_user: postgres

    - name: Stop PostgreSQL before configuration changes
      service:
        name: postgresql
        state: stopped
      become: true

    - name: Configure for replication
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: | 
          listen_addresses = '*'
          wal_level = replica
          hot_standby = on
          max_wal_senders = 10
          max_replication_slots = 10
          hot_standby_feedback = on
          log_replication_commands = on

    - name: Configure ph_hba.conf for replication
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: |
          host replication {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} 0.0.0.0/0 md5

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
      register: pg_restart
      ignore_errors: true

- name: db_repl creation and init
  hosts: host02
  gather_facts: false
  become: true
  tasks:
    - name: Stop PostgreSQL service
      service:
        name: postgresql
        state: stopped

    - name: Remove existing postgresql data
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main
    
    - name: Create configuration directory
      command: mkdir -p /etc/postgresql/

    - name: Ensure necessary configurations are set in postgresql.conf
      blockinfile:
        path: /etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
        owner: postgres
        group: postgres
        mode: '0644'

    - name: Perform base backup from master
      command: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -p {{ hostvars[inventory_hostname]['DB_PORT'] }} -D /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -vP -w
      environment:
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
      register: info
    - name: Debug info
      debug:
        var: info

    - name: Set correct permissions for PostgreSQL data directory
      file:
        path: /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main
        state: directory
        owner: postgres
        group: postgres
        mode: '0750'

    - name: Create standby.signal
      file:
        path: /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/standby.signal
        state: touch
        owner: postgres
        group: postgres
        mode: '0600'

    - name: Append primary_conninfo to postgresql.auto.conf
      lineinfile:
        path: /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.auto.conf
        line: "primary_conninfo = 'host={{ hostvars[inventory_hostname]['DB_HOST'] }} port={{ hostvars[inventory_hostname]['DB_PORT'] }} user={{ hostvars[inventory_hostname]['DB_REPL_USER'] }} password={{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}'"
        create: yes
        owner: postgres
        group: postgres
        mode: '0600'

    - name: Change ownership of postgresql data directory
      command: chown -R postgres:postgres /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main

    - name: Create postgresql.auto.conf file
      copy:
        content: |
          primary_conninfo = 'host={{ hostvars[inventory_hostname]['DB_HOST'] }} port={{ hostvars[inventory_hostname]['DB_PORT'] }} user={{ hostvars[inventory_hostname]['DB_REPL_USER'] }} password={{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}'
        dest: /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.auto.conf
        owner: postgres
        group: postgres
        mode: '0600'

    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started

- name: bot installation
  hosts: host03
  gather_facts: false
  become: true
  tasks:
    - name: Create directory for bot
      file:
        path: "{{ hostvars[inventory_hostname]['dir'] }}"
        state: directory
        mode: '0755'

    - name: Install Python
      apt:
        name: python3
        state: present
        update_cache: yes
    - name: Install pip
      apt:
        name: python3-pip
        state: present

    - name: Download bot.py
      get_url:
        url: https://raw.githubusercontent.com/DmitriyOlo/devops_bot/docker/bot/bot.py
        dest: "{{ hostvars[inventory_hostname]['dir'] }}/bot.py"

    - name: Download requirements.txt
      get_url:
        url: https://raw.githubusercontent.com/DmitriyOlo/devops_bot/docker/bot/requirements.txt
        dest: "{{ hostvars[inventory_hostname]['dir'] }}/requirements.txt"
    - name: Install Python dependencies globally
      pip:
        requirements: "{{ hostvars[inventory_hostname]['dir'] }}/requirements.txt"
        executable: pip3

    - name: Run Python bot
      command: python3 {{ hostvars[inventory_hostname]['dir'] }}/bot.py
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
        DB_PORT_SSH: "{{ hostvars[inventory_hostname]['DB_PORT_SSH'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
        PG_VERSION: "{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"